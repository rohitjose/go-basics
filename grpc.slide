gRPC
gRPC Concepts and Internals

* Protocol Buffers role in gRPC
* Function
- Messages: Data, Request & Response
- Service: Service name and RPC Endpoints

Proto files enable code generation - both server and client stubs
.code proto/Hello.proto

* Why? 
- Payload sizes are smaller compared to other text based encoding like JSON
- Saves a lot of network bandwidth
- Parsing: JSON is human readable (text) gRPC is binary => Less CPU intensive
- Multiple language support

* HTTP/2
* Overview
gRPC uses HTTP/2 as the backbone for its communications
Demo: [[https://imagekit.io/demo/http2-vs-http1]]

HTTP 1.1 Limitations

- New TCP connection at server for each Request
- Headers are not compressed (plain text)
- Only request-response pattern

* Advantages

- Supports multiplexing - client and sever can push messages in parallel => Reduced latency
- Supports push streams - bidirectional
- Supports header compression
- Binary Protocol
- Used natively by the gRPC framework

* gRPC Types
* Types of API in gRPC
.image gRPC/types.PNG

* gRPC vs REST
* Differences
- JSON vs Protocol Buffers
- Text based vs binary messaging
- HTTP1.1 vs HTTP2
- Request-Response vs Streaming
- Code generation
 

